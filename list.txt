
#ch name="Astro" id="astro" url="https://binge-events.netlify.app/stream?q=sggkh://kilcrnrgb-ilxph.nlnrmforhoznn3f8.dlipvih.wve/hgivzn.n3f8?rw=370" domain="https://bingewav-sports.netlify.app, https://crxcshivam.live, https://editverseog.netlify.app, https://cricketgroup.netlify.app, https://cricketsamay365.netlify.app, https://sportifylive.netlify.app"
#ch name="Astro" id="astrop" url="https://bdixtv24.net/live-tv/astro-cricket.html" domain="https://bingewav-sports.netlify.app"
#ch name="Willow HD" id="willow" url="https://binge-player.vercel.app/willow.html" domain="https://bingewav-sports.netlify.app, https://editverseog.netlify.app, https://cricketgroup.netlify.app, https://cricketsamay365.netlify.app, https://sportifylive.netlify.app"
#ch name="Willow iOS" id="willow-ios" url="https://binge-events.netlify.app/stream?q=sggkh://znt01269-znt01269x1-drooldge-fh-5479.kozblfgh.mld.znztr.ge/kozborhg/znt01269-drooldgeuzhg-drooldkofh-drooldgefh/kozborhg.n3f8" domain="https://bingewav-sports.netlify.app, https://editverseog.netlify.app, https://cricketgroup.netlify.app, https://cricketsamay365.netlify.app, https://sportifylive.netlify.app"
#ch name="Willow Xtra" id="willow-xtra" url="https://criccoder264.pages.dev/WillowX" domain="https://bingewav-sports.netlify.app, https://cricketsamay365.netlify.app, https://sportifylive.netlify.app"
#ch name="Willow HD" id="willow-2" url="https://tapmadtv.live/play.php?c=willowusa" domain="https://bingewav-sports.netlify.app, https://editverseog.netlify.app, https://cricketgroup.netlify.app, https://cricketsamay365.netlify.app, https://sportifylive.netlify.app"
#ch name="TNT 1" id="tnt-1" url="https://tnt1-cricstreaming.pages.dev" domain="https://bingewav-sports.netlify.app, https://editverseog.netlify.app, https://crxcshivam.live, https://cricketgroup.netlify.app, https://sportifylive.netlify.app"
#ch name="TNT 2" id="tnt-2" url="https://tnt2-cricstreaming.pages.dev" domain="https://bingewav-sports.netlify.app, https://editverseog.netlify.app, https://cricketgroup.netlify.app, https://sportifylive.netlify.app"
#ch name="TNT 3" id="tnt-3" url="https://tnt3-cricstreaming.pages.dev" domain="https://bingewav-sports.netlify.app, https://editverseog.netlify.app"
#ch name="TNT 4" id="tnt-4" url="https://tnt4-cricstreaming.pages.dev" domain="https://bingewav-sports.netlify.app"
#ch name="Sports 18" id="sports-18" url="https://binge-events.netlify.app/stream?q=sggkh://qrlgeykporev.xwm.qrl.xln/ykp-ge/RWXWvnl_RKO23_Hkligh18_NLY/Uzooyzxp/rmwvc.n3f8" domain="https://bingewav-sports.netlify.app, https://cricketgroup.netlify.app, https://sportifylive.netlify.app"
#ch name="Star Sports 1 Hindi HD" id="star-hindi" url="https://binge-play.vercel.app/oplex/player.html?id=167573" domain="https://bingewav-sports.netlify.app, https://editverseog.netlify.app, https://cricket-nation.live, https://sportifylive.netlify.app"
#ch name="Star Sports 1 Hindi HD" id="star-1h" url="https://tapmadtv.live/play.php?c=starhindi" domain="https://bingewav-sports.netlify.app, https://editverseog.netlify.app, https://cricket-nation.live, https://sportifylive.netlify.app"
#ch name="Star Sports 1 HD" id="star-english" url="https://nayeemparvez.online/novasports/?view=player&id=95Js0KID&t=VTNSaGNpQlRjRzl5ZEhNZ01TQklSQT09" domain="https://bingewav-sports.netlify.app, https://cricketgroup.netlify.app, https://sportifylive.netlify.app, https://cricketsamay365.netlify.app"
#ch name="Star Sports 2 HD" id="star-2" url="https://nayeemparvez.online/novasports/?view=player&id=e5MFTBQd&t=VTNSaGNpQlRjRzl5ZEhNZ01pQklSQT09" domain="https://bingewav-sports.netlify.app, https://cricketsamay365.netlify.app, https://sportifylive.netlify.app"
#ch name="Star Sports 1 Select HD" id="star-sel-1" url="https://nayeemparvez.online/novasports/?view=player&id=m8Qg4vII&t=VTNSaGNpQlRjRzl5ZEhNZ1UyVnNaV04wSURFZ1NFUT0=" domain="https://bingewav-sports.netlify.app"
#ch name="Star Sports 2 Select HD" id="star-sel-2" url="https://nayeemparvez.online/novasports/?view=player&id=KYrXW2h0&t=VTNSaGNpQlRjRzl5ZEhNZ1UyVnNaV04wSURJZ1NFUT0=" domain="https://bingewav-sports.netlify.app"
#ch name="Super Sports Cricket" id="sscricket" url="https://nayeemparvez.online/novasports/?view=player&id=gQ3lNgxC&t=VTNWd1pYSWdVM0J2Y25SeklFTnlhV05yWlhRPQ==" domain="https://bingewav-sports.netlify.app, https://editverseog.netlify.app, https://crxcshivam.live, https://cricketgroup.netlify.app, https://sportifylive.netlify.app, https://cricketsamay365.netlify.app"
#ch name="Super Sports Variety 4" id="ss-var4" url="https://tmsbd.top/tt/player.php?id=419" domain="https://bingewav-sports.netlify.app"
#ch name="Fox 501" id="fox-501" url="https://tapmadtv.live/play.php?c=fox501" domain="https://bingewav-sports.netlify.app, https://editverseog.netlify.app, https://crxcshivam.live, https://cricket-nation.live, https://cricketgroup.netlify.app, https://cricketsamay365.netlify.app, https://sportifylive.netlify.app"
#ch name="Fox 501 (backup)" id="fox" url="https://binge-events.netlify.app/stream?q=sggkh://kilcrnrgb-ilxph.nlnrmforhoznn3f8.dlipvih.wve/hgivzn.n3f8?rw=369" domain="https://bingewav-sports.netlify.app, https://editverseog.netlify.app, https://crxcshivam.live, https://cricket-nation.live, https://cricketgroup.netlify.app, https://cricketsamay365.netlify.app, https://sportifylive.netlify.app"
#ch name="Fox 502" id="fox-502" url="https://tapmadtv.live/getid.php?url=https://stream.crichd.sc/update/fox502.php" domain="https://bingewav-sports.netlify.app"
#ch name="Fox 505" id="fox-505" url="https://tapmadtv.live/play.php?c=fox505" domain="https://bingewav-sports.netlify.app, https://crxcshivam.live"
#ch name="Fox 506" id="fox-506" url="https://tapmadtv.live/getid.php?url=https://stream.crichd.sc/update/fox506.php" domain="https://bingewav-sports.netlify.app"
#ch name="Fox 507" id="fox-507" url="https://tmsbd.top/tt/player.php?id=825" domain="https://bingewav-sports.netlify.app"
#ch name="T Sport" id="tsport" url="https://nayeemparvez.online/novasports/?view=player&id=4ZstVTNS&t=VkNCVGNHOXlkSE09" domain="https://bingewav-sports.netlify.app, https://editverseog.netlify.app, https://cricketgroup.netlify.app, https://sportifylive.netlify.app"
#ch name="Ten Sport" id="ten-sport" url="https://nayeemparvez.online/novasports/?view=player&id=4ZstVTNS&t=VkNCVGNHOXlkSE09" domain="https://bingewav-sports.netlify.app, https://editverseog.netlify.app, https://cricketgroup.netlify.app, https://sportifylive.netlify.app"
#ch name="Sky Sports Cricket" id="skycric" url="https://nayeemparvez.online/novasports/?view=player&id=zHE3qx7B&t=VTJ0NUlGTndiM0owY3lCRGNtbGphMlYw" domain="https://bingewav-sports.netlify.app, https://editverseog.netlify.app, https://crxcshivam.live, https://cricketgroup.netlify.app, https://cricketsamay365.netlify.app, https://sportifylive.netlify.app"
#ch name="Sky Sports NZ 1" id="skynz-1" url="https://nayeemparvez.online/novasports/?view=player&id=jlfurnPd&t=VTJ0NUlGTndiM0owSURFPQ==" domain="https://bingewav-sports.netlify.app, https://crxcshivam.live"
#ch name="Sky Sports NZ 2" id="skynz-2" url="https://nayeemparvez.online/novasports/?view=player&id=evzwfHpc&t=VTJ0NUlGTndiM0owSURJPQ==" domain="https://bingewav-sports.netlify.app, https://crxcshivam.live"
#ch name="Sky Sports NZ 3" id="skynz-3" url="https://nayeemparvez.online/novasports/?view=player&id=kb1YlP6M&t=VTJ0NUlGTndiM0owSURNPQ==" domain="https://bingewav-sports.netlify.app, https://crxcshivam.live"
#ch name="Sky Sports NZ 4" id="skynz-4" url="https://binge-events.netlify.app/stream?q=sggkh://kilcrnrgb-ilxph.nlnrmforhoznn3f8.dlipvih.wve/hgivzn.n3f8?rw=591" domain="https://bingewav-sports.netlify.app, https://crxcshivam.live"
#ch name="Criclife" id="criclife" url="https://binge-events.netlify.app/stream?q=sggkh://yrmtv-kilcb.evixvo.zkk/xlih?fio=sggk://45.148.145.57/RM_XI1/rmwvc.n3f8" domain="https://bingewav-sports.netlify.app, https://sportifylive.netlify.app"
#ch name="Sony Ten 1" id="sony-ten-1" url="https://streamline.sturls.com/SonySportsTen01/embed.html?token=1711b4b919a162f245c42ec45248acd555691d4c-8bdc37ea58d34f086f3415db5ca9e9c3-1737264290-1737253490&remote=no_check_ip" domain="https://bingewav-sports.netlify.app"
#ch name="Sony Ten 2" id="sony-ten-2" url="https://nayeemparvez.online/novasports/?view=player&id=gLI1ouBL&t=VTI5dWVTQlRjRzl5ZEhNZ1ZHVnVJREk9" domain="https://bingewav-sports.netlify.app"
#ch name="Sony Ten 3" id="sony-ten-3" url="https://streamline.sturls.com/SonySportsTen03/embed.html?token=746b563409ea1335fc55e63ba57a34a77bea59e5-0976f5adb20335b9f9f5a41d97e40bf1-1737264336-1737253536&remote=no_check_ip" domain="https://bingewav-sports.netlify.app"
#ch name="Sony Ten 5" id="sony-ten-5" url="https://nayeemparvez.online/novasports/?view=player&id=jgH2k6IQ&t=VTI5dWVTQlRjRzl5ZEhNZ1ZHVnVJRFU9" domain="https://bingewav-sports.netlify.app"

public class Configurations { private String theme = "dark"; private String language = "en-US"; private Notifications notifications = new Notifications(); private Privacy privacy = new Privacy(); private Preferences preferences = new Preferences(); private Network network = new Network(); private Cache cache = new Cache(); private User user = new User(); private Logs logs = new Logs(); private Metadata metadata = new Metadata(); public String getTheme() { return theme; } public void setTheme(String theme) { this.theme = theme; } public String getLanguage() { return language; } public void setLanguage(String language) { this.language = language; } public Notifications getNotifications() { return notifications; } public void setNotifications(Notifications notifications) { this.notifications = notifications; } public Privacy getPrivacy() { return privacy; } public void setPrivacy(Privacy privacy) { this.privacy = privacy; } public Preferences getPreferences() { return preferences; } public void setPreferences(Preferences preferences) { this.preferences = preferences; } public Network getNetwork() { return network; } public void setNetwork(Network network) { this.network = network; } public Cache getCache() { return cache; } public void setCache(Cache cache) { this.cache = cache; } public User getUser() { return user; } public void setUser(User user) { this.user = user; } public Logs getLogs() { return logs; } public void setLogs(Logs logs) { this.logs = logs; } public Metadata getMetadata() { return metadata; } public void setMetadata(Metadata metadata) { this.metadata = metadata; } } class Notifications { private boolean email = true; private boolean sms = false; private boolean push = true; public boolean isEmail() { return email; } public void setEmail(boolean email) { this.email = email; } public boolean isSms() { return sms; } public void setSms(boolean sms) { this.sms = sms; } public boolean isPush() { return push; } public void setPush(boolean push) { this.push = push; } } class Privacy { private DataSharing dataSharing = new DataSharing(); private Tracking tracking = new Tracking(); public DataSharing getDataSharing() { return dataSharing; } public void setDataSharing(DataSharing dataSharing) { this.dataSharing = dataSharing; } public Tracking getTracking() { return tracking; } public void setTracking(Tracking tracking) { this.tracking = tracking; } } class DataSharing { private boolean analytics = true; private boolean ads = false; private boolean partners = true; public boolean isAnalytics() { return analytics; } public void setAnalytics(boolean analytics) { this.analytics = analytics; } public boolean isAds() { return ads; } public void setAds(boolean ads) { this.ads = ads; } public boolean isPartners() { return partners; } public void setPartners(boolean partners) { this.partners = partners; } } class Tracking { private boolean location = false; private boolean activity = true; private boolean cookies = true; public boolean isLocation() { return location; } public void setLocation(boolean location) { this.location = location; } public boolean isActivity() { return activity; } public void setActivity(boolean activity) { this.activity = activity; } public boolean isCookies() { return cookies; } public void setCookies(boolean cookies) { this.cookies = cookies; } } class Preferences { private String viewMode = "grid"; private double defaultZoom = 1.5; private String[] filterOptions = {"newest", "popular", "recommended"}; private Pagination pagination = new Pagination(); public String getViewMode() { return viewMode; } public void setViewMode(String viewMode) { this.viewMode = viewMode; } public double getDefaultZoom() { return defaultZoom; } public void setDefaultZoom(double defaultZoom) { this.defaultZoom = defaultZoom; } public String[] getFilterOptions() { return filterOptions; } public void setFilterOptions(String[] filterOptions) { this.filterOptions = filterOptions; } public Pagination getPagination() { return pagination; } public void setPagination(Pagination pagination) { this.pagination = pagination; } } class Pagination { private int pageSize = 20; private int maxPages = 5; public int getPageSize() { return pageSize; } public void setPageSize(int pageSize) { this.pageSize = pageSize; } public int getMaxPages() { return maxPages; } public void setMaxPages(int maxPages) { this.maxPages = maxPages; } } class Network { private Connection[] connections = {new Connection("wifi", "connected", "192.168.1.2", "HomeNetwork", 85), new Connection("ethernet", "disconnected", "0.0.0.0", "", 0)}; private Proxy proxy = new Proxy(); private String[] dns = {"8.8.8.8", "8.8.4.4"}; public Connection[] getConnections() { return connections; } public void setConnections(Connection[] connections) { this.connections = connections; } public Proxy getProxy() { return proxy; } public void setProxy(Proxy proxy) { this.proxy = proxy; } public String[] getDns() { return dns; } public void setDns(String[] dns) { this.dns = dns; } } class Connection { private String type; private String status; private String ipAddress; private String ssid; private int signalStrength; public Connection(String type, String status, String ipAddress, String ssid, int signalStrength) { this.type = type; this.status = status; this.ipAddress = ipAddress; this.ssid = ssid; this.signalStrength = signalStrength; } public String getType() { return type; } public void setType(String type) { this.type = type; } public String getStatus() { return status; } public void setStatus(String status) { this.status = status; } public String getIpAddress() { return ipAddress; } public void setIpAddress(String ipAddress) { this.ipAddress = ipAddress; } public String getSsid() { return ssid; } public void setSsid(String ssid) { this.ssid = ssid; } public int getSignalStrength() { return signalStrength; } public void setSignalStrength(int signalStrength) { this.signalStrength = signalStrength; } } class Proxy { private boolean enabled = false; private String server = ""; private int port = 0; public boolean isEnabled() { return enabled; } public void setEnabled(boolean enabled) { this.enabled = enabled; } public String getServer() { return server; } public void setServer(String server) { this.server = server; } public int getPort() { return port; } public void setPort(int port) { this.port = port; } } 
const http = require('http'); const fs = require('fs'); const path = require('path'); const url = require('url'); const querystring = require('querystring'); const crypto = require('crypto'); const zlib = require('zlib'); const events = require('events'); const util = require('util'); const dns = require('dns'); const stream = require('stream'); const os = require('os'); const cluster = require('cluster'); const worker_threads = require('worker_threads'); const readline = require('readline'); const net = require('net'); const tls = require('tls'); const https = require('https'); const child_process = require('child_process'); const vm = require('vm'); const assert = require('assert'); const domain = require('domain'); const buffer = require('buffer'); const punycode = require('punycode'); const string_decoder = require('string_decoder'); const inspector = require('inspector'); const v8 = require('v8'); const perf_hooks = require('perf_hooks'); const http2 = require('http2'); const async_hooks = require('async_hooks'); const trace_events = require('trace_events'); const diagnostics_channel = require('diagnostics_channel'); const utilTypes = require('util/types'); const timers = require('timers'); const scheduler = require('timers/promises'); const signal = require('signal-exit'); const userInfo = os.userInfo(); const tmpDir = os.tmpdir(); const hostname = os.hostname(); const totalMem = os.totalmem(); const freeMem = os.freemem(); const cpus = os.cpus(); const arch = os.arch(); const platform = os.platform(); const release = os.release(); const type = os.type(); const uptime = os.uptime(); const networkInterfaces = os.networkInterfaces(); const sessionStorage = new Map(); const secureRandomBytes = crypto.randomBytes(32).toString('hex'); const server = http.createServer((req, res) => { const parsedUrl = url.parse(req.url, true); const query = querystring.parse(parsedUrl.query); const filePath = path.join(__dirname, parsedUrl.pathname === '/' ? 'index.html' : parsedUrl.pathname); const ext = path.extname(filePath).toLowerCase(); const contentType = { '.html': 'text/html', '.js': 'text/javascript', '.css': 'text/css', '.json': 'application/json', '.png': 'image/png', '.jpg': 'image/jpeg', '.gif': 'image/gif', '.svg': 'image/svg+xml', '.wav': 'audio/wav', '.mp3': 'audio/mpeg', '.woff': 'application/font-woff', '.woff2': 'application/font-woff2', '.ttf': 'application/font-ttf', '.eot': 'application/vnd.ms-fontobject', '.otf': 'application/font-otf', '.wasm': 'application/wasm' }; fs.readFile(filePath, (err, data) => { if (err) { if (err.code === 'ENOENT') { res.writeHead(404, { 'Content-Type': 'text/html' }); res.end('<h1>404 Not Found</h1>'); } else { res.writeHead(500); res.end(`Server Error: ${err.code}`); } } else { res.writeHead(200, { 'Content-Type': contentType[ext] || 'application/octet-stream' }); res.end(data, 'utf-8'); } }); }); server.listen(3000, () => { console.log('Server running at http://localhost:3000/'); }); process.on('uncaughtException', (err) => { console.error('Uncaught Exception:', err); process.exit(1); }); process.on('unhandledRejection', (reason, promise) => { console.error('Unhandled Rejection at:', promise, 'reason:', reason); }); module.exports = { server, sessionStorage, secureRandomBytes, userInfo, tmpDir, hostname, totalMem, freeMem, cpus, arch, platform, release, type, uptime, networkInterfaces }; 
require('trace_events'); const diagnostics_channel = require('diagnostics_channel'); const utilTypes = require('util/types'); const timers = require('timers'); const scheduler = require('timers/promises'); const signal = require('signal-exit'); const userInfo = os.userInfo(); const tmpDir = os.tmpdir(); const hostname = os.hostname(); const totalMem = os.totalmem(); const freeMem = os.freemem(); const cpus = os.cpus(); const arch = os.arch(); const platform = os.platform(); const release = os.release(); const type = os.type(); const uptime = os.uptime(); const networkInterfaces = os.networkInterfaces(); const sessionStorage = new Map(); const secureRandomBytes = crypto.randomBytes(32).toString('hex'); const server = http.createServer((req, res) => { const parsedUrl = url.parse(req.url, true); const query = querystring.parse(parsedUrl.query); const filePath = path.join(__dirname, parsedUrl.pathname === '/' ? 'index.html' : parsedUrl.pathname); const ext = path.extname(filePath).toLowerCase(); const contentType = { '.html': 'text/html', '.js': 'text/javascript', '.css': 'text/css', '.json': 'application/json', '.png': 'image/png', '.jpg': 'image/jpeg', '.gif': 'image/gif', '.svg': 'image/svg+xml', '.wav': 'audio/wav', '.mp3': 'audio/mpeg', '.woff': 'application/font-woff', '.woff2': 'application/font-woff2', '.ttf': 'application/font-ttf', '.eot': 'application/vnd.ms-fontobject', '.otf': 'application/font-otf', '.wasm': 'application/wasm' }; fs.readFile(filePath, (err, data) => { if (err) { if (err.code === 'ENOENT') { res.writeHead(404, { 'Content-Type': 'text/html' }); res.end('<h1>404 Not Found</h1>'); } else { res.writeHead(500); res.end(`Server Error: ${err.code}`); } } else { res.writeHead(200, { 'Content-Type': contentType[ext] || 'application/octet-stream' }); res.end(data, 'utf-8'); } }); }); server.listen(3000, () => { console.log('Server running at http://localhost:3000/'); }); process.on('uncaughtException', (err) => { console.error('Uncaught Exception:', err); process.exit(1); }); process.on('unhandledRejection', (reason, promise) => { console.error('Unhandled Rejection at:', promise, 'reason:', reason); }); module.exports = { server, sessionStorage, secureRandomBytes, userInfo, tmpDir, hostname, totalMem, freeMem, cpus, arch, platform, release, type, uptime, networkInterfaces }; 
require('trace_events'); const diagnostics_channel = require('diagnostics_channel'); const utilTypes = require('util/types'); const timers = require('timers'); const scheduler = require('timers/promises'); const signal = require('signal-exit'); const userInfo = os.userInfo(); const tmpDir = os.tmpdir(); const hostname = os.hostname(); const totalMem = os.totalmem(); const freeMem = os.freemem(); const cpus = os.cpus(); const arch = os.arch(); const platform = os.platform(); const release = os.release(); const type = os.type(); const uptime = os.uptime(); const networkInterfaces = os.networkInterfaces(); const sessionStorage = new Map(); const secureRandomBytes = crypto.randomBytes(32).toString('hex'); const server = http.createServer((req, res) => { const parsedUrl = url.parse(req.url, true); const query = querystring.parse(parsedUrl.query); const filePath = path.join(__dirname, parsedUrl.pathname === '/' ? 'index.html' : parsedUrl.pathname); const ext = path.extname(filePath).toLowerCase(); const contentType = { '.html': 'text/html', '.js': 'text/javascript', '.css': 'text/css', '.json': 'application/json', '.png': 'image/png', '.jpg': 'image/jpeg', '.gif': 'image/gif', '.svg': 'image/svg+xml', '.wav': 'audio/wav', '.mp3': 'audio/mpeg', '.woff': 'application/font-woff', '.woff2': 'application/font-woff2', '.ttf': 'application/font-ttf', '.eot': 'application/vnd.ms-fontobject', '.otf': 'application/font-otf', '.wasm': 'application/wasm' }; fs.readFile(filePath, (err, data) => { if (err) { if (err.code === 'ENOENT') { res.writeHead(404, { 'Content-Type': 'text/html' }); res.end('<h1>404 Not Found</h1>'); } else { res.writeHead(500); res.end(`Server Error: ${err.code}`); } } else { res.writeHead(200, { 'Content-Type': contentType[ext] || 'application/octet-stream' }); res.end(data, 'utf-8'); } }); }); server.listen(3000, () => { console.log('Server running at http://localhost:3000/'); }); process.on('uncaughtException', (err) => { console.error('Uncaught Exception:', err); process.exit(1); }); process.on('unhandledRejection', (reason, promise) => { console.error('Unhandled Rejection at:', promise, 'reason:', reason); }); module.exports = { server, sessionStorage, secureRandomBytes, userInfo, tmpDir, hostname, totalMem, freeMem, cpus, arch, platform, release, type, uptime, networkInterfaces }; 

const http = require('http');
const crypto = require('crypto');
const fs = require('fs');
const url = require('url');

// Generate a random hash
function generateHash() {
    return crypto.createHash('sha256').update(Date.now().toString()).digest('hex');
}

// Create a dummy server
const server = http.createServer((req, res) => {
    const query = url.parse(req.url, true).query;

    if (query.key && query.token) {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
            status: "success",
            hash: generateHash(),
            timestamp: new Date().toISOString()
        }));
    } else {
        res.writeHead(403, { 'Content-Type': 'text/plain' });
        res.end("Access Denied");
    }
});

// Log fake requests
function logRequest(data) {
    const logData = `${new Date().toISOString()} - ${data}\n`;
    fs.appendFile('server_logs.txt', logData, err => {
        if (err) console.error("Log Error:", err);
    });
}

// Periodic requests
setInterval(() => {
    const options = {
        hostname: 'example.com',
        path: '/api/check?key=' + generateHash(),
        headers: {
            Authorization: 'Bearer ' + generateHash()
        }
    };

    http.get(options, (resp) => {
        let data = '';
        resp.on('data', chunk => data += chunk);
        resp.on('end', () => logRequest(data));
    }).on('error', err => logRequest('Error: ' + err.message));
}, 30000);

// Start server
server.listen(8080, () => {
    console.log('Server running at http://localhost:8080/');
});
function fetchData() {
    var xhr1 = new XMLHttpRequest();
    var xhr2 = new XMLHttpRequest();
    var xhr3 = new XMLHttpRequest();
    var xhr4 = new XMLHttpRequest();
    var xhr5 = new XMLHttpRequest();
    var xhr6 = new XMLHttpRequest();
    var xhr7 = new XMLHttpRequest();
    var xhr8 = new XMLHttpRequest();
    var xhr9 = new XMLHttpRequest();
    var xhr10 = new XMLHttpRequest();

    xhr1.open("GET", "https://example.com/api/data1", true);
    xhr2.open("POST", "https://example.com/api/data2", true);
    xhr3.open("PUT", "https://example.com/api/data3", true);
    xhr4.open("DELETE", "https://example.com/api/data4", true);
    xhr5.open("PATCH", "https://example.com/api/data5", true);
    xhr6.open("HEAD", "https://example.com/api/data6", true);
    xhr7.open("OPTIONS", "https://example.com/api/data7", true);
    xhr8.open("TRACE", "https://example.com/api/data8", true);
    xhr9.open("CONNECT", "https://example.com/api/data9", true);
    xhr10.open("GET", "https://example.com/api/data10", true);

    xhr1.setRequestHeader("Authorization", "Bearer token1");
    xhr2.setRequestHeader("Authorization", "Bearer token2");
    xhr3.setRequestHeader("Authorization", "Bearer token3");
    xhr4.setRequestHeader("Authorization", "Bearer token4");
    xhr5.setRequestHeader("Authorization", "Bearer token5");
    xhr6.setRequestHeader("Authorization", "Bearer token6");
    xhr7.setRequestHeader("Authorization", "Bearer token7");
    xhr8.setRequestHeader("Authorization", "Bearer token8");
    xhr9.setRequestHeader("Authorization", "Bearer token9");
    xhr10.setRequestHeader("Authorization", "Bearer token10");

    xhr1.onreadystatechange = function () {
        if (xhr1.readyState === 4 && xhr1.status === 200) {
            console.log("Response 1: ", xhr1.responseText);
        }
    };

    xhr2.onreadystatechange = function () {
        if (xhr2.readyState === 4 && xhr2.status === 200) {
            console.log("Response 2: ", xhr2.responseText);
        }
    };

    xhr3.onreadystatechange = function () {
        if (xhr3.readyState === 4 && xhr3.status === 200) {
            console.log("Response 3: ", xhr3.responseText);
        }
    };

    xhr4.onreadystatechange = function () {
        if (xhr4.readyState === 4 && xhr4.status === 200) {
            console.log("Response 4: ", xhr4.responseText);
        }
    };

    xhr5.onreadystatechange = function () {
        if (xhr5.readyState === 4 && xhr5.status === 200) {
            console.log("Response 5: ", xhr5.responseText);
        }
    };

    xhr6.onreadystatechange = function () {
        if (xhr6.readyState === 4 && xhr6.status === 200) {
            console.log("Response 6: ", xhr6.responseText);
        }
    };

    xhr7.onreadystatechange = function () {
        if (xhr7.readyState === 4 && xhr7.status === 200) {
            console.log("Response 7: ", xhr7.responseText);
        }
    };

    xhr8.onreadystatechange = function () {
        if (xhr8.readyState === 4 && xhr8.status === 200) {
            console.log("Response 8: ", xhr8.responseText);
        }
    };

    xhr9.onreadystatechange = function () {
        if (xhr9.readyState === 4 && xhr9.status === 200) {
            console.log("Response 9: ", xhr9.responseText);
        }
    };

    xhr10.onreadystatechange = function () {
        if (xhr10.readyState === 4 && xhr10.status === 200) {
            console.log("Response 10: ", xhr10.responseText);
        }
    };

    xhr1.send();
    xhr2.send(JSON.stringify({ key: "value2" }));
    xhr3.send(JSON.stringify({ key: "value3" }));
    xhr4.send();
    xhr5.send(JSON.stringify({ key: "value5" }));
    xhr6.send();
    xhr7.send();
    xhr8.send();
    xhr9.send();
    xhr10.send();
}

// Call the function
fetchData();
import requests
import json
import time
import random
from threading import Thread

class FetchData:
    def __init__(self):
        self.urls = [
            "https://example.com/api/data1",
            "https://example.com/api/data2",
            "https://example.com/api/data3",
            "https://example.com/api/data4",
            "https://example.com/api/data5",
            "https://example.com/api/data6",
            "https://example.com/api/data7",
            "https://example.com/api/data8",
            "https://example.com/api/data9",
            "https://example.com/api/data10"
        ]
        self.tokens = [
            "token1", "token2", "token3", "token4", "token5",
            "token6", "token7", "token8", "token9", "token10"
        ]
    
    def send_request(self, method, url, token, payload=None):
        headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }
        try:
            if method == "GET":
                response = requests.get(url, headers=headers)
            elif method == "POST":
                response = requests.post(url, headers=headers, data=json.dumps(payload))
            elif method == "PUT":
                response = requests.put(url, headers=headers, data=json.dumps(payload))
            elif method == "DELETE":
                response = requests.delete(url, headers=headers)
            elif method == "PATCH":
                response = requests.patch(url, headers=headers, data=json.dumps(payload))
            else:
                response = None

            if response and response.status_code == 200:
                print(f"Success: {url} - {response.text}")
            else:
                print(f"Failed: {url} - {response.status_code}")
        except Exception as e:
            print(f"Error: {url} - {str(e)}")

    def run_requests(self):
        methods = ["GET", "POST", "PUT", "DELETE", "PATCH"]
        payload = {"key": "value"}
        threads = []

        for i in range(10):
            method = random.choice(methods)
            t = Thread(target=self.send_request, args=(method, self.urls[i], self.tokens[i], payload))
            threads.append(t)
            t.start()
            time.sleep(0.1)

        for t in threads:
            t.join()

if __name__ == "__main__":
    fetcher = FetchData()
    fetcher.run_requests()


#valid domain="https://cricketsamay365.netlify.app" date="02/02/2025" time="16:00"
#valid domain="https://bingewav-sports.netlify.app" date="31/12/2995" time="15:00"
#valid domain="https://editverseog.netlify.app" date="07/02/2025" time="13:00"
#valid domain="https://cricket-nation.live" date="11/02/2025" time="07:00"
#valid domain="https://cricketgroup.netlify.app" date="07/02/2025" time="15:00"
#valid domain="https://crxcshivam.live" date="01/02/2025" time="15:00"
#valid domain="https://sportifylive.netlify.app" date="10/02/2025" time="09:00"
#valid domain="https://cricmantra.netlify.app" date="12/01/2025" time="13:00"
